<?xml version="1.0" encoding="utf-8"?>
<document><h1>Embedded Python</h1>
<p>The connection between Markdown content and Python can be made from 2 different directions. </p>
<ul>
<li>PageBot application scripts that create a <strong>Document</strong> instance with templates, elements and typesetters that parse Markdown text.</li>
<li>MarkDown text files that include Python code to create documents.</li>
</ul>
<p>If possible, the interpreting Composer already made set of globals that include the overall Document instance as “doc”.</p>
<p>For example, you can execute Python code from MarkDown like this:</p>
<h2>The Typesetter</h2>
<p>The <strong>Typesetter</strong>, reading this Markdown file, will generate a galley (where galley.elements is a list of all elements found in the MarkDown, including codeblocks) including the code blocks. They are just collected by the Typesetter, not interpreted or executed.</p>
<p>During the process <strong>errors</strong> and <strong>warnings</strong> are collected as part of the global result dictionary.</p>
<p>The resulting dictionary contains Python code blocks, indicated by a triple <q>~</q> tilde.</p>
<p>A code block can contain any kind of Python code. Any “globally” created object will become an entry in the resulting dictionary.</p>
<h2>The Composer</h2>
<p>The composer inteprets the code blocks, directing the selection of styles and the target page/box for the sequential text elements.</p>
<h2>Code blocks</h2>
<p>Using the standard triple-tilde markers in MarkDown blocks of (Python) can be defined, that later get executed by the <strong>Composer</strong>. <br />
Codeblocks are chunks of Python code that can use globals supplied by the composer. Standard globals are <strong>doc</strong>, <strong>page</strong>, <strong>box</strong>, etc. If they get altered by the codeblock (e.g. by selecting another page or box), then this object is answered back to the composer.</p>
<pre><code>
# It is possible to print from within a code block, 
# to facilitate debugging single lines.
print('This is the current document:', doc)
print('This is the current page:', page)
print('This is the current box:', box)

# Create a new page, from within the code block execution.
page = page.next 
# All MarkDown text and images flow into the current “box”.
box = page.select('Box') # Select named text box from page.
print('New selected box target', box)

# It is also possible to define globals during the 
# processing of code blocks that then answer back 
# into the targets dicionary. 
# The calling application can then use the collected 
# data for further processing. 
# This way a bi-direcitonal communication is possible 
# between the applicaiton an the MarkDown document.

aa = 123
bb = 234
# The answered data can have any format of Python object.
cc = ['List', 'of', 'things']

# Since the &quot;box&quot; of the second page was selected,
# all text after this code block flows into there.

</code></pre>

<p>Blocks of text [p] are glued together here if possible. The first line indent of a new text box is set to firstColumnIndent.<br />
Similarly, the first line indent of a new tag is set to firstTagIndent if defined. Otherwise firstLineIndent is used.</p>
<pre><code>
from pagebot.contributions.filibuster.blurb import blurb
box.bs += context.newString(blurb.getBlurb('article')+'\n' + blurb.getBlurb('article')+'\n', style=styles['p'])

</code></pre>

<p><strong>This is another block in a different [strong] style.</strong></p>
<p><em>And yet another [em] block</em></p></document>