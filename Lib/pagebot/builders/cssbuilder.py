# -*- coding: UTF-8 -*-
# -----------------------------------------------------------------------------
#
#     P A G E B O T
#
#     Copyright (c) 2016+ Buro Petr van Blokland + Claudia Mens & Font Bureau
#     www.pagebot.io
#     Licensed under MIT conditions
#     Made for usage in DrawBot, www.drawbot.com
# -----------------------------------------------------------------------------
#
#     cssbuilder.py
#
#     U N D E R  D E V E L O P M E N T
#
#     This builder is being worked on. 
#     It will generate the export .css from all CSS-based style values in the element tree,
#     which will be used by the HtmlBuilder to generate a close representation of the 
#     document as interactive & responsive website.
#
import codecs
import pagebot
from basebuilder import BaseBuilder
from pagebot.toolbox.transformer import color2Css

class CssBuilder(BaseBuilder):

    def build(self, e, view):
        u"""
        Builds the CSS for Element e and downwards, using the view parent document 
        as reference for styles.
        """
        assert self.path is not None
        line = '\t'+'.'*70+'\n'
        out = codecs.open(self.path, 'w', 'utf-8')
        out.write('@charset "UTF-8";\n')
        out.write("/*\n%s\tGenerated by PageBot Version %s\n%s*/\n" % (line, pagebot.__version__, line))

        doc = e.doc
        self.buildRootStyle(doc, out)
        self.buildMainStyles(doc, out)
        out.close()

    def _buildStyle(self, doc, out, styleName, style):
        u"""Export the style parameters as translated CSS values."""
        out.write('.%s {\n' % styleName)
        # For now write all values as comment as development reference.
        out.write('/*')
        for parName, value in sorted(style.items()):
			out.write('\t%s: %s;\n' % (parName, value))
        out.write('*/\n')
        out.write('}\n\n')

    def buildRootStyle(self, doc, out):
    	u"""Translate the doc.rootStyle to the root body{...} CSS style using doc.rootStyle values."""
    	out.write('body {\n')
        style = doc.styles['root']
        out.write('\tbackground-color: %s;\n' % (color2Css(style['fill'] or (1,1,1))))
        out.write('\tfont-family: %s;\n' % ((style['font'])))
        out.write('\tfont-size: %spx;\n' % ((style['fontSize'])))
        out.write('\tcolor: %s;\n' % (color2Css(style['textFill'] or (1, 0, 0))))

        # For now write all values as comments a development reference.
    	out.write('/*')
    	for name, value in sorted(style.items()):
    		out.write('\t%s: %s;\n' % (name, value))
    	out.write('*/\n')
    	out.write('}\n\n')

    def buildMainStyles(self, doc, out):
    	u"""BUild the styles for text elements, as defined in the doc.styles dictionary."""
    	for styleName, style in sorted(doc.styles.items()):
    		self._buildStyle(doc, out, styleName, style)

    def buildElementStyles(self, doc, out, e=None):
        u"""Recursively build all style values into CSS."""
    	if e is None:
    		self.builfElementStyle(doc, out, self)
    	else:
    		self._buildStyle(doc, out, e.name, e.style)
    		for child in e.getElements():
    			self.buildElementStyles(doc, out, child)


