<?xml version="1.0" encoding="utf-8"?>
<document><pre><code># This markDown file is an example of how website build
# from a single source documents. Instructions for new pages
# and the direciton of targets for the text.

# Code blocks in the markdown content file, direct
# the building of page elements to be filled.
# Start at the first page in the document

# Uncomment to see cssId/cssClass markers in the page
#doc.view.showIdClass = True

# Page (Home)
#&lt;tab/&gt;Wrapper
#&lt;tab/&gt;&lt;tab/&gt;Header 
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Logo (+BurgerButton)
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Navigation/TopMenu/MenuItem(s)
#      Content
#  &lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Banner
#  &lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;SlideShow (on Home)
#      &lt;tab/&gt;&lt;tab/&gt;Slides
#      &lt;tab/&gt;&lt;tab/&gt;SlideSide
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Section(s)
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Introduction
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Main
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Mains
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Main
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Side
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Sides
#&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;&lt;tab/&gt;Side
#&lt;tab/&gt;&lt;tab/&gt;Footer
#
# ----------------------------------------
# index.html
# ----------------------------------------
page.name = 'Home'
page.url = 'index.html'
content = page.select('Content')
box = content.newBanner()
</code></pre>

<h1>PageBot Library</h1>
<pre><code>box = content.newIntroduction()
</code></pre>

<h1>What is PageBot?</h1>
<pre><code>section = content.newSection()
box = section.newMain()
</code></pre>

<p>PageBot is library of Python classes that contain all knowledge to create high quality publications using code, such as PDF documents, images, animations and websites.</p>
<p>It is available both as Python library context for <a href="https://www.drawbot.com">DrawBot</a> and as part of a collection of stand-alone desktop applications that can be created from it. </p>
<p>Initiated by <a href="https://typetr.typenetwork.com">TYPETR</a>, the aim is to create a system for scriptable applications generating high quality typographic documents for a variety of output media, that support high quality fonts.</p>
<p>PageBot is available under MIT Open Source license from <a href="https://github.com/PageBot/PageBot">github.com/PageBot/PageBot</a></p>
<p>A manual, generated automatically with PageBot, is at <a href="https://typenetwork.github.io/PageBot">typenetwork.github.io/PageBot</a></p>
<p>An example website generated automatically with PageBot, is at <a href="http://designdesign.space">designdesign.space</a> which also includes entry points for studies and workshops how to work with PageBot.</p>
<p>The TYPETR Upgrade website <a href="https://upgrade.typenetwork.com">upgrade.typenetwork.com</a> is an example where the website and all illustrations/animations are generated by PageBot scripts.</p>
<h2>Current status</h2>
<p>Although publicly available as Open Source under an MIT license, PageBot is still in a testing/alpha phase.<br />
More examples need to be created to fully test all functions.</p>
<pre><code># ----------------------------------------
# tour
# ----------------------------------------
page = page.next
page.applyTemplate(template)  
page.name = 'Tour'
page.url = 'tour.html'

content = page.select('Content')
box = content.newBanner()
</code></pre>

<h2>PageBot tour</h2>
<pre><code># ----------------------------------------
# reference
# ----------------------------------------
page = page.next
page.applyTemplate(template)  
page.name = 'Reference'
page.url = 'reference.html'

content = page.select('Content')
box = content.newBanner()
</code></pre>

<h2>PageBot reference</h2>
<pre><code># ----------------------------------------
# functions
# ----------------------------------------
page = page.next
page.applyTemplate(template)  
page.name = 'Functions'
page.url = 'functions.html'

content = page.select('Content')
box = content.newBanner()
</code></pre>

<h2>PageBot functions</h2>
<pre><code>section = content.newSection()
box = section.newMain()
</code></pre>

<p>An overview of PageBot functions reads like this:</p>
<ul>
<li>Various types of Element objects can be placed on a page or inside other Element objects.</li>
<li>Grids can be defined through style measurements and views.</li>
<li>Page templates (or templates for any other element combination) can be defined and applied.</li>
<li>Automatic layout conditions for elements, like even distribution across or floating down parent elements.</li>
<li>Specialized views on a Document, such as plain pages, spreads and other layout of page groups, optional with crop-marks, registration-mark, color-strips, file name, etc. The result of all views can be placed on pages as illustration.</li>
<li>Graphics - using all Drawbot drawing tools.</li>
<li>All image filtering supplied by Drawbot ImageObject.</li>
<li>Access and modify images on pixel-level.</li>
<li>Cascading styles, where Element values inherit from parent Elements, similar to CSS behavior.   </li>
<li>Text flows are using the macOS FormattedString for all typographic parameters.</li>
<li>Random Text generator for headlines and articles.</li>
<li>Read text from MarkDown and XML (.MD .XML)</li>
<li>Support large amount of text processing functions:</li>
<li>centered, left, right and justified</li>
<li>Text to fit a box and elastic box to fit text</li>
<li>Tabular setting</li>
<li>Text Flow from one element to another. </li>
<li>Variable Font UI access and instance creation, as the whole <q>fonttools</q> Python library is available.</li>
<li>Access to all font metrics.</li>
<li>Outline Font access modification.</li>
<li>Space, groups and kerning access and modification.</li>
<li>OT layout and feature access and modification.</li>
<li>3D Positioning of points, for future usage.</li>
<li>Motion Graphics, export as animated .gif and .mov files, keyframing timeline, </li>
<li>Export to PDF, PNG, JPG, SVG, (animated) GIF, MOV, XML, through programmable views.</li>
<li>Build web sites, pre-compiling all images used into the formats that can be displayed by browsers (.PNG .JPG .SVG)</li>
<li>Automatic table of contents, image references, quote references, etc. from composed documents.</li>
</ul>
<h2>License</h2>
<p>All PageBot source code is available as open source under the MIT license. </p>
<p>However, some other separate works are aggregated in this repository for convenience, and available under their own licenses. </p>
<p>See LICENSE files for details. </p>
<pre><code># ----------------------------------------
# examples.html
# ----------------------------------------
page = page.next
page.applyTemplate(template)  
page.name = 'Examples'
page.url = 'examples.html'

content = page.select('Content')
box = content.newBanner()
</code></pre>

<h1>Examples</h1>
<pre><code>section = content.newSection()
box = section.newMain()
</code></pre>

<pre><code># ----------------------------------------
# future.html
# ----------------------------------------
page = page.next
page.applyTemplate(template)  
page.name = 'Future'
page.url = 'future.html'

content = page.select('Content')
box = content.newBanner()
</code></pre>

<h1>Future developments</h1>
<pre><code>section = content.newSection()
box = section.newMain()
</code></pre>

<ul>
<li>Element classes supporting various types of graphs, info-graphics, maps, PageBot document layout, Variable Font axes layout, font metrics.</li>
<li>Views for thumbnail page overview, combined booklet-sheets for print, site-maps, etc.</li>
<li>Add export of text to MarkDown .md files.</li>
<li>Add export to online documents, such as HTML/CSS/JS for specific designs of web pages, such as Kirby.</li>
<li>Export to WordPress® PHP sites.</li>
<li>Export to Ruby®/Sketchup® data files.</li>
<li>Add export to Angular® files.</li>
<li>Export to InDesign® and Illustrator®, as close as possible translating PageBot elements to the native file format of these applications.</li>
<li>Time line, definition and editing, length and fps.</li>
<li>Integrate the PageBot manual builder with other export functions of the library.</li>
<li>Add more unit-tests to guarantee the integrity of the library and output consistency.</li>
<li>Automatic support of ornament frames, in connection to the Element borders and the layout of exiting (TN) border fonts.</li>
</ul>
<h2>Types of publications to develop</h2>
<ul>
<li>PageBot stationary and publications as scripted templates</li>
<li>Specimens for TN library</li>
<li>Recreation of legacy type specimens as PageBot templates</li>
<li>Magazines</li>
<li>Newspapers</li>
<li>Newsletters</li>
<li>Books</li>
<li>Parametric corporate identities, including their style guides, stationary and business card templates.</li>
<li>Parametric advertizements (connecting to existing ad-systems)</li>
<li>Online documents, such as single page websites</li>
<li>Wayfinding templates for signs and maps</li>
<li>T-Shirt templates</li>
<li>Templates with embedded information for graphic- and typographic education.</li>
</ul></document>